the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
DistanceFromPlane = function(z, w, b) {
sum(z * w) + b
}
ClassifyLinear = function(x, w, b) {
distances = apply(x, 1, DistanceFromPlane, w, b)
return(ifelse(distances < 0, -1, +1))
}
EuclideanNorm <- function(x) {
return(sqrt(sum(x * x)))
}
PerceptronFunction <- function(x, y, learning.rate = 1) {
w = vector(length = ncol(x)) # initialize w
b = 0 # Initialize b
iterations = 0 # count iterations
R = max(apply(x, 1, EuclideanNorm))
convergence = FALSE # to enter the while loop
while (!convergence) {
convergence = TRUE # hopes luck
yc <- ClassifyLinear(x, w, b)
for (i in 1:nrow(x)) {
if (y[i] != yc[i]) {
convergence <- FALSE
w <- w + learning.rate * y[i] * x[i,]
b <- b + learning.rate * y[i] * R^2  ## como b es la constante, es la que mas mueve con respecto
iterations <- iterations + 1         ##  al origen
}
}
}
s = EuclideanNorm(w)
return(list(w = w/s, b = b/s, steps = iterations))
}
# very easy
# x2 = x1 + 1/2
set.seed(1)
x1 <- runif(20,-1,1)
x2 <- runif(20,-1,1)
x <- cbind(x1,x2)
y <- ifelse(x2 > 0.5 + x1, +1, -1)
PlotData <- function(x, y) {
plot(x, pch = ifelse(y > 0, "+", "-"), xlim = c(-1,1), ylim = c(-1,1), cex = 2)
abline(0.5,1)
points(c(0,0), c(0,0), pch = 19)
lines(c(0,-0.25), c(0,0.25), lty = 2)
arrows(-0.3, 0.2, -0.4, 0.3)
text(-0.45, 0.35, "w", cex = 2)
text(-0.0, 0.15, "b", cex = 2)
}
PlotData(x, y)
the_perceptron <- PerceptronFunction(x,y)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .5)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .01)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .001)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000001)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
# error
print(the_perceptron)
## Slope value close to one?
the_perceptron$w[1]/-(the_perceptron$w[2])
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
# error
print(the_perceptron)
## Slope value close to one?
the_perceptron$w[1]/(-the_perceptron$w[2])
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
# error
print(the_perceptron)
## Slope value close to one?
the_perceptron$w[1]/(-the_perceptron$w[2])
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
# very easy
# x2 = x1 + 1/2
set.seed(1)
x1 <- runif(50,-1,1)
x2 <- runif(50,-1,1)
x <- cbind(x1,x2)
y <- ifelse(x2 > 0.5 + x1, +1, -1)
PlotData <- function(x, y) {
plot(x, pch = ifelse(y > 0, "+", "-"), xlim = c(-1,1), ylim = c(-1,1), cex = 2)
abline(0.5,1)
points(c(0,0), c(0,0), pch = 19)
lines(c(0,-0.25), c(0,0.25), lty = 2)
arrows(-0.3, 0.2, -0.4, 0.3)
text(-0.45, 0.35, "w", cex = 2)
text(-0.0, 0.15, "b", cex = 2)
}
PlotData(x, y)
the_perceptron <- PerceptronFunction(x,y)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
# very easy
# x2 = x1 + 1/2
set.seed(1)
x1 <- runif(20,-1,1) ## only 20 because qe don't want too many of plots
x2 <- runif(20,-1,1)
x <- cbind(x1,x2)
y <- ifelse(x2 > 0.5 + x1, +1, -1)
## Modification of previously defined function so diferent lines are plotted
PlotData2 <- function(x, y, b, w) {
plot(x, pch = ifelse(y > 0, "+", "-"), xlim = c(-5,5), ylim = c(-5,5), cex = 2)
abline(a = b,b = w)
}
PerceptronFunction2 <- function(x, y, learning.rate = 1) {
w = vector(length = ncol(x)) # initialize w
b = 0 # Initialize b
iterations = 0 # count iterations
R = max(apply(x, 1, EuclideanNorm))
convergence = FALSE # to enter the while loop
while (!convergence) {
convergence = TRUE # hopes luck
yc <- ClassifyLinear(x, w, b)
for (i in 1:nrow(x)) {
if (y[i] != yc[i]) {
convergence <- FALSE
w <- w + learning.rate * y[i] * x[i,]
b <- b + learning.rate * y[i] * R^2  ## como b es la constante, es la que mas mueve con respecto
iterations <- iterations + 1         ##  al origen
PlotData2(x, y, -b/w[2], -w[1]/w[2])
}
}
}
}
PerceptronFunction2(x, y)
# very easy
# x2 = x1 + 1/2
set.seed(1)
x1 <- runif(100,-1,1)
x2 <- runif(100,-1,1)
x <- cbind(x1,x2)
y <- ifelse(x2 > 0.5 + x1, +1, -1)
PlotData <- function(x, y) {
plot(x, pch = ifelse(y > 0, "+", "-"), xlim = c(-1,1), ylim = c(-1,1), cex = 2)
abline(0.5,1)
points(c(0,0), c(0,0), pch = 19)
lines(c(0,-0.25), c(0,0.25), lty = 2)
arrows(-0.3, 0.2, -0.4, 0.3)
text(-0.45, 0.35, "w", cex = 2)
text(-0.0, 0.15, "b", cex = 2)
}
PlotData(x, y)
the_perceptron <- PerceptronFunction(x,y)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .5)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .5)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .01)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .001)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000001)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
predicted_y <- ClassifyLinear(x, the_perceptron$w, the_perceptron$b)
# error
print(the_perceptron)
print(sum(abs(y - predicted_y)))
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
# error
print(the_perceptron)
## Slope value close to one?
the_perceptron$w[1]/(-the_perceptron$w[2])
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
# error
print(the_perceptron)
## Slope value close to one?
the_perceptron$w[1]/(-the_perceptron$w[2])
## Intercept close to 0.5?
the_perceptron$b/(-the_perceptron$w[2])
## Intercept close to 0.5?
round(the_perceptron$b/(-the_perceptron$w[2]),1)
the_perceptron <- PerceptronFunction(x,y, learning.rate = .000000000000000000000000000000000001)
# error
print(the_perceptron)
## Slope value close to one?
round(the_perceptron$w[1]/(-the_perceptron$w[2]),1) == 1
## Intercept close to 0.5?
round(the_perceptron$b/(-the_perceptron$w[2]),1) == 0.5
