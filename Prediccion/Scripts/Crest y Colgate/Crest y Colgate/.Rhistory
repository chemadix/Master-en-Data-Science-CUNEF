logcrest <- log(crest)
df_logcrest <- data.frame(value = as.vector(logcrest),
time = time(logcrest))
ggplot(df_logcrest) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("log - MktShare") +
ggtitle("Market Share Semanal- Crest (logarítmico)") +
xlab("Semanas") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 2)
## Difference
ggtsdisplay(logcrest)
ggtsdisplay(diff(logcrest))
which(diff(logcrest) == max(diff(logcrest)))
which(diff(logcrest) == min(diff(logcrest)))
#-#- Colgate #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
## Plot Serie colgate
colgate = xts((datos$Colgate), order.by = datos$Date)
colnames(colgate) <- "colgate"
## paqueteria zoo para mejor funcionamiento
colgate = as.zoo(colgate$colgate)
#autoplot(colgate) + ggtitle("Market Share Semanal - Colgate") + xlab("Semanas") + ylab("Market Share") +
#  geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 2)
## Nuestra ts de market share de colgate de llama colgate
df_colgate <- data.frame(value = as.vector(colgate),
time = time(colgate))
ggplot(df_colgate) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("Market Share") +
ggtitle("Market Share Semanal- Colgate") +
xlab("Semanas") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 2)
## trabajamos con transformacion logaritmica
logcolgate <- log(colgate)
df_logcolgate <- data.frame(value = as.vector(logcolgate),
time = time(logcolgate))
ggplot(df_logcolgate) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("log - MktShare") +
ggtitle("Market Share Semanal- Colgate (logarítmico)") +
xlab("Semanas") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 2)
## Difference
ggtsdisplay(logcolgate)
ggtsdisplay(diff(logcolgate))
ggtsdisplay(diff(logcolgate, 12))
which(diff(logcolgate) == max(diff(logcolgate)))
which(diff(logcolgate) == min(diff(logcolgate)))
#-#- Fechas Importantes #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
## histograms
p1 <- ggplot(data = diff(logcrest,12), aes(Crest)) +
geom_histogram(aes(y = ..density.., fill = ..count..), color = "white") +
xlab("Crest") +
geom_density(fill = "steelblue", alpha = 0.5, color = "white") +
theme(legend.position = "None")  + ylim(0,2) + xlim(-1.5,1.5) +
geom_vline(xintercept = c(2 * sd(diff(logcrest,12)),-2 * sd(diff(logcrest,12))),
linetype = 2, colour = "red")
p2 <- ggplot(data = diff(logcolgate,12), aes(colgate)) +
geom_histogram(aes(y = ..density.., fill = ..count..), color = "white") +
xlab("Colgate") +
geom_density(fill = "steelblue", alpha = 0.5, color = "white") +
theme(legend.position = "None")  + ylim(0,2) + xlim(-1.5,1.5) +
geom_vline(xintercept = c(2 * sd(diff(logcolgate,12)),-2 * sd(diff(logcolgate,12))),
linetype = 2, colour = "red")
grid.arrange(
p1, p2,
widths = c( 1, 1),
top = text_grob("LogDifferences"),
layout_matrix = rbind(c(1, 2),
c(1, 2))
)
k = 4
which(abs(diff(logcrest,12)) > k*sd(abs(diff(logcrest,12))))
which(abs(diff(logcolgate,12)) > k*sd(abs(diff(logcolgate,12))))
## trabajando con logaritmos
p1 <- autoplot(((logcrest)))  +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[22 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
p2 <- autoplot(((logcolgate))) +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[102 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[187 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[199 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
grid.arrange(
p1, p2,
widths = c( 1, 1),
#top = text_grob(Character),
layout_matrix = rbind(c(1, 1),
c(2, 2))
)
## 12 lags (trimestre)
p1 <- autoplot((diff(logcrest,12)))  +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[22 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
p2 <- autoplot((diff(logcolgate,12))) +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[102 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[187 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[199 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
grid.arrange(
p1, p2,
widths = c( 1, 1),
#top = text_grob(Character),
layout_matrix = rbind(c(1, 1),
c(2, 2))
)
## Crest ARIMA ########################################################################################
modCrest <- auto.arima(logcrest)
summary(modCrest)
#- Training set     -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
## Select number of observation to compare forecast (16 semanas)
cOmit = 16
## Data Size
nObs = length(logcrest)
## sub_sample
oCrest <- window(logcrest,start = index(logcrest[1]),end = index(logcrest[nObs - cOmit]))
## ARIMA MODEL Automatic selection####
crest.train.arima = auto.arima(oCrest) ## lamnda cero is log transformation
summary(crest.train.arima)
#residual analysis
ggtsdisplay(crest.train.arima$residuals)
#box-Ljung Test
Box.test(crest.train.arima$residuals,lag = 4, fitdf = 3, type = "Lj")
Box.test(crest.train.arima$residuals,lag = 8, fitdf = 3, type = "Lj")
Box.test(crest.train.arima$residuals,lag = 12, fitdf = 3, type = "Lj")
## Residuales independientes
plot(forecast(crest.train.arima, h = 16))
lines(window(logcrest),type = "o")
plot(forecast(crest.train.arima, h = 16), xlim = c(-2800, -2420), ylim = c(-2,0))
lines(window(logcrest),type = "o")
fcrest_arima <- forecast(crest.train.arima, h = 16) ## predecimos 16 semanas
crestArimaMatrix <- matrix(c(fcrest_arima$mean[1:16], as.double(tail(logcrest,16))), ncol = 2)
crestArimaMatrix
## MSE
mean((crestArimaMatrix[,1] - crestArimaMatrix[,2])^2)
## MAE
mean(abs(crestArimaMatrix[,1] - crestArimaMatrix[,2]))
## Bias
mean(crestArimaMatrix[,1] - crestArimaMatrix[,2])
## Colgate ARIMA ######################################################################################
modColgate <- auto.arima(logcolgate)
summary(modColgate)
#- Training set     -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
## Select number of observation to compare forecast (16 semanas)
cOmit = 16
## Data Size
nObs = length(logcolgate)
## sub_sample
ocolgate <- window(logcolgate,start = index(logcolgate[1]),end = index(logcolgate[nObs - cOmit]))
## ARIMA MODEL Automatic selection####
colgate.train.arima = auto.arima(ocolgate) ## lamnda cero is log transformation
summary(colgate.train.arima)
#residual analysis
ggtsdisplay(colgate.train.arima$residuals)
#box-Ljung Test
Box.test(colgate.train.arima$residuals,lag = 4, fitdf = 3, type = "Lj")
Box.test(colgate.train.arima$residuals,lag = 8, fitdf = 3, type = "Lj")
Box.test(colgate.train.arima$residuals,lag = 12, fitdf = 3, type = "Lj")
## Residuales independientes
plot(forecast(colgate.train.arima, h = 16))
lines(window(logcolgate),type = "o")
plot(forecast(colgate.train.arima, h = 16), xlim = c(-2800, -2420), ylim = c(-2,0))
lines(window(logcolgate),type = "o")
fcolgate_arima <- forecast(colgate.train.arima, h = 16) ## predecimos 16 semanas
colgateArimaMatrix <- matrix(c(fcolgate_arima$mean[1:16], as.double(tail(logcolgate,16))), ncol = 2)
colgateArimaMatrix
## MSE
mean((colgateArimaMatrix[,1] - colgateArimaMatrix[,2])^2)
## MAE
mean(abs(colgateArimaMatrix[,1] - colgateArimaMatrix[,2]))
## Bias
mean(colgateArimaMatrix[,1] - colgateArimaMatrix[,2])
## Outliers ###########################################################################################
##
## Crest
detectAO(modCrest)
detectIO(modCrest)
## Colgate
detectAO(modColgate)
detectIO(modColgate)
## Crest ARIMAX #######################################################################################
pulseFCrest <- data.frame(ADA = 1*(seq(logcrest) == which(datos$Date == "1960-08-01")))[,1]
plot(pulseFCrest)
stepFCrest <- data.frame(ADA = 1*(seq(logcolgate) > which(datos$Date == "1960-08-01")))[,1]
plot(stepFCrest)
df_crest <- data.frame(pulseF,stepF)
## Solo step
crest.m1 = arimax(as.double(logcrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrest),
transfer = list(c(0,0)),
xreg = data.frame(Imp1 = 1*(seq(logcolgate) == (22 + 12)),
Imp2 = 1*(seq(logcolgate) == (90 + 12)))
)
crest.m1
plot(ts(stepFCrest*(0.5808)))
plot(as.double(logcrest), ylab = "Log(Crest)", type = "l")
points(fitted(crest.m1), col = "blue")
#- Training set     -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
## Select number of observation to compare forecast (16 semanas)
cOmit = 16
## Data Size
nObs = length(logcrest)
## sub_sample
oCrest <- window(logcrest,start = index(logcrest[1]),end = index(logcrest[nObs - cOmit]))
stepFCrestARIMAX <- data.frame(ADA = 1*(seq(oCrest) > which(datos$Date == "1960-08-01")))[,1]
## ARIMAX MODEL CREST
crest.train.arimax = arimax(as.double(oCrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrestARIMAX),
transfer = list(c(0,0)),
xreg = data.frame(Imp1 = 1*(seq(oCrest) == (22 + 12)),
Imp2 = 1*(seq(oCrest) == (90 + 12)))
)
summary(crest.train.arimax)
#residual analysis
ggtsdisplay(crest.train.arimax$residuals)
#box-Ljung Test
Box.test(crest.train.arimax$residuals,lag = 4, fitdf = 3, type = "Lj")
Box.test(crest.train.arimax$residuals,lag = 8, fitdf = 3, type = "Lj")
Box.test(crest.train.arimax$residuals,lag = 12, fitdf = 3, type = "Lj")
## Residuales independientes
plot(forecast(crest.train.arimax, h = 16, newxreg = c(0,0)))
## Colgate ARIMA ######################################################################################
modColgate <- auto.arima(logcolgate)
summary(modColgate)
plot(as.double(logcrest), ylab = "Log(Crest)", type = "l")
points(fitted(modColgate), col = "blue")
plot(as.double(logcolgate), ylab = "Log(Crest)", type = "l")
points(fitted(modColgate), col = "blue")
fitted(modColgate)
as.double(logcolgate)
plot(as.double(logcolgate), ylab = "Log(Crest)", type = "l")
points(as.double(fitted(modColgate)), col = "blue")
plot(as.double(logcrest), ylab = "Log(Crest)", type = "l")
points(as.double(fitted(modCrest)), col = "blue")
p1 <- ggplot(data = diff(logcrest,12), aes(Crest)) +
geom_histogram(aes(y = ..density.., fill = ..count..), color = "white") +
xlab("Crest") +
geom_density(fill = "steelblue", alpha = 0.5, color = "white") +
theme(legend.position = "None")  + ylim(0,2) + xlim(-1.5,1.5) +
geom_vline(xintercept = c(2 * sd(diff(logcrest,12)),-2 * sd(diff(logcrest,12))),
linetype = 2, colour = "red")
p2 <- ggplot(data = diff(logcolgate,12), aes(colgate)) +
geom_histogram(aes(y = ..density.., fill = ..count..), color = "white") +
xlab("Colgate") +
geom_density(fill = "steelblue", alpha = 0.5, color = "white") +
theme(legend.position = "None")  + ylim(0,2) + xlim(-1.5,1.5) +
geom_vline(xintercept = c(2 * sd(diff(logcolgate,12)),-2 * sd(diff(logcolgate,12))),
linetype = 2, colour = "red")
grid.arrange(
p1, p2,
widths = c( 1, 1),
top = text_grob("LogDifferences"),
layout_matrix = rbind(c(1, 2),
c(1, 2))
)
## trabajando con logaritmos
p1 <- autoplot(((logcrest)))  +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[22 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
p2 <- autoplot(((logcolgate))) +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[102 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[187 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[199 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
grid.arrange(
p1, p2,
widths = c( 1, 1),
#top = text_grob(Character),
layout_matrix = rbind(c(1, 1),
c(2, 2))
)
## 12 lags (trimestre)
p1 <- autoplot((diff(logcrest,12)))  +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[126 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[22 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
p2 <- autoplot((diff(logcolgate,12))) +
geom_vline(xintercept = as.numeric(datos$Date[90 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[102 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[187 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[199 + 12]), linetype = 2, colour = "red") +
geom_vline(xintercept = as.numeric(datos$Date[135]), linetype = 1, colour = "blue")
grid.arrange(
p1, p2,
widths = c( 1, 1),
#top = text_grob(Character),
layout_matrix = rbind(c(1, 1),
c(2, 2))
)
plot(as.double(logcrest), ylab = "Log(Crest)", type = "l")
points(as.double(fitted(modCrest)), col = "blue")
ggtsdisplay(crest.train.arima$residuals)
plot(forecast(crest.train.arima, h = 16))
lines(window(logcrest),type = "o")
plot(forecast(crest.train.arima, h = 16), xlim = c(-2800, -2420), ylim = c(-2,0))
lines(window(logcrest),type = "o")
plot(as.double(logcolgate), ylab = "Log(Crest)", type = "l")
points(as.double(fitted(modColgate)), col = "blue")
ggtsdisplay(colgate.train.arima$residuals)
ggtsdisplay(colgate.train.arima$residuals)
plot(forecast(colgate.train.arima, h = 16))
lines(window(logcolgate),type = "o")
plot(forecast(colgate.train.arima, h = 16), xlim = c(-2800, -2420), ylim = c(-2,0))
lines(window(logcolgate),type = "o")
plot(forecast(colgate.train.arima, h = 16))
lines(window(logcolgate),type = "o")
plot(forecast(colgate.train.arima, h = 16), xlim = c(-2800, -2420), ylim = c(-2,0))
lines(window(logcolgate),type = "o")
plot(stepFCrest)
plot(as.double(logcrest), ylab = "Log(Crest)", type = "l")
points(fitted(crest.m1), col = "blue")
ggtsdisplay(crest.train.arimax$residuals)
plot(forecast(crest.train.arimax, h = 16, newxreg = c(0,0)))
plot(forecast(crest.train.arimax, h = 16, newxreg = c(0,0)))
plot(as.double(logcolgate), ylab = "Log(Colgate)", type = "l")
points(fitted(colgate.m1), col = "blue")
modDyn <- dynlm(logcrest ~ L(logcrest, 1) + L(logcolgate, 0:12))
modDyn
tsdisplay(modDyn$residuals)
## Diff
modDDyn <- dynlm(diff(logcrest) ~ L(diff(logcrest), 1) + L(diff(logcolgate), 0:12))
modDDyn
tsdisplay(modDDyn$residuals)
### ARIMAX
plot(modDA$coef[4:15], type = "h")
modDA <- arimax(as.double(diff(logcrest)),
order = c(3,1,0),
include.mean = T,
xtransf = as.double(diff(logcolgate)),
transfer = list(c(0,12)),
method = "ML")
modDA
tsdisplay(modDA$residuals)
plot(modDA$coef[4:16], type = "h")
plot(modDA$coef[4:16], type = "h")
tsdisplay(modDA$residuals)
modDA <- arimax(as.double(diff(logcrest)),
order = c(3,1,0),
include.mean = T,
xtransf = as.double(diff(logcolgate)),
transfer = list(c(0,0)),
method = "ML")
modDA
tsdisplay(modDA$residuals)
knitr::include_graphics('Images/din 1.jpg')
knitr::include_graphics('Images/din 2.jpg')
knitr::include_graphics('Images/reg din res.jpg')
knitr::include_graphics('Images/reg din res.png')
knitr::include_graphics('Images/tra.jpg')
knitr::include_graphics('Images/hist.png')
knitr::include_graphics('Images/Rplot.png')
knitr::include_graphics('Images/out log.png')
knitr::include_graphics('Images/out log dif.png')
knitr::include_graphics('Images/out log diff.png')
knitr::include_graphics('Images/ajuste crest arima.png')
knitr::include_graphics('Images/ajuste crest arima.png')
knitr::include_graphics('Images/ajuste crest arimax.png')
knitr::include_graphics('Images/ajuste colgate arima.png')
knitr::include_graphics('Images/ajuste colgate arimax.png')
knitr::include_graphics('Images/pred crest arima.png')
knitr::include_graphics('Images/pred crest arima 2.png')
knitr::include_graphics('Images/pred colgate arima.png')
knitr::include_graphics('Images/pred colgate arima 2.png')
knitr::include_graphics('Images/dummy step.png')
## Crest ARIMAX #######################################################################################
pulseFCrest <- data.frame(ADA = 1*(seq(logcrest) == which(datos$Date == "1960-08-01")))[,1]
plot(pulseFCrest)
stepFCrest <- data.frame(ADA = 1*(seq(logcolgate) > which(datos$Date == "1960-08-01")))[,1]
plot(stepFCrest)
df_crest <- data.frame(pulseF,stepF)
## Solo step
crest.m1 = arimax(as.double(logcrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrest),
transfer = list(c(0,0)),
xreg = data.frame(Imp1 = 1*(seq(logcolgate) == (22 + 12)),
Imp2 = 1*(seq(logcolgate) == (90 + 12)))
)
crest.m1
plot(ts(stepFCrest*(0.5808)))
plot(as.double(logcrest), ylab = "Log(Crest)", type = "l")
points(fitted(crest.m1), col = "blue")
#- Training set     -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
## Select number of observation to compare forecast (16 semanas)
cOmit = 16
## Data Size
nObs = length(logcrest)
## sub_sample
oCrest <- window(logcrest,start = index(logcrest[1]),end = index(logcrest[nObs - cOmit]))
stepFCrestARIMAX <- data.frame(ADA = 1*(seq(oCrest) > which(datos$Date == "1960-08-01")))[,1]
## ARIMAX MODEL CREST
crest.train.arimax = arimax(as.double(oCrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrestARIMAX),
transfer = list(c(0,0)),
xreg = data.frame(Imp1 = 1*(seq(oCrest) == (22 + 12)),
Imp2 = 1*(seq(oCrest) == (90 + 12)))
)
summary(crest.train.arimax)
crestArimaxMatrix <- matrix(c(fcrest_arimax$mean[1:16], as.double(tail(logcrest,16))), ncol = 2)
#crestArimaxMatrix <- matrix(c(fcrest_arimax$mean[1:16], as.double(tail(logcrest,16))), ncol = 2)
#crestArimaxMatrix
## MSE
#mean((crestArimaxMatrix[,1] - crestArimaxMatrix[,2])^2)
## MAE
#mean(abs(crestArimaxMatrix[,1] - crestArimaxMatrix[,2]))
## Bias
#mean(crestArimaxMatrix[,1] - crestArimaxMatrix[,2])
### ARIMAX
plot(modDA$coef[4:15], type = "h")
modDA <- arimax(as.double(diff(logcrest)),
order = c(3,1,0),
include.mean = T,
xtransf = as.double(diff(logcolgate)),
transfer = list(c(0,12)),
method = "ML")
modDA
tsdisplay(modDA$residuals)
plot(modDA$coef[4:16], type = "h")
### ARIMAX
modDA <- arimax(as.double(diff(logcrest)),
order = c(3,1,0),
include.mean = T,
xtransf = as.double(diff(logcolgate)),
transfer = list(c(0,12)),
method = "ML")
modDA
plot(modDA$coef[4:15], type = "h")
tsdisplay(modDA$residuals)
plot(modDA$coef[4:16], type = "h")
crest.train.arimax = arimax(as.double(oCrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrestARIMAX),
transfer = list(c(0,0))#,
#xreg = data.frame(Imp1 = 1*(seq(oCrest) == (22 + 12)),
#                  Imp2 = 1*(seq(oCrest) == (90 + 12)))
)
library(dplyr)
library(tidyverse)
library(forecast)
library(xts)
library(ggplot2)
library(zoo)
library(ggfortify)
library(skimr)
library(gridExtra)
library(ggpubr)
library(TSA)
library(Hmisc)
library(astsa)
library(dynlm)
crest.train.arimax = arimax(as.double(oCrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrestARIMAX),
transfer = list(c(0,0))#,
#xreg = data.frame(Imp1 = 1*(seq(oCrest) == (22 + 12)),
#                  Imp2 = 1*(seq(oCrest) == (90 + 12)))
)
#residual analysis
ggtsdisplay(crest.train.arimax$residuals)
plot(forecast(crest.train.arimax))
crest.train.arimax$series
crest.train.arimax$call
crest.train.arimax = arimax(as.double(oCrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrestARIMAX),
transfer = list(c(0,0)),
xreg = data.frame(Imp1 = 1*(seq(oCrest) == (22 + 12)),
Imp2 = 1*(seq(oCrest) == (90 + 12)))
)
summary(crest.train.arimax)
plot(forecast(crest.train.arimax), xreg = data.frame(IMP1 = rep(0,14),
IMP2 = rep(0,14)))
plot(forecast(crest.train.arimax), xreg = cbind(IMP1 = rep(0,14),
IMP2 = rep(0,14)))
plot(forecast(crest.train.arimax), h = 16, xreg = cbind(IMP1 = rep(0,16),
IMP2 = rep(0,16)))
plot(forecast(crest.train.arimax), h = 16, newxreg = cbind(IMP1 = rep(0,16),
IMP2 = rep(0,16)))
plot(forecast(crest.train.arimax), newxreg = cbind(IMP1 = rep(0,16),
IMP2 = rep(0,16)), h = 16)
crest.train.arimax = arimax(as.double(oCrest$Crest),
order = c(3,1,0), method = 'ML',
xtransf = data.frame(ADA = stepFCrestARIMAX),
transfer = list(c(0,0))#,
#xreg = data.frame(Imp1 = 1*(seq(oCrest) == (22 + 12)),
# Imp2 = 1*(seq(oCrest) == (90 + 12)))
)
summary(crest.train.arimax)
plot(forecast(crest.train.arimax), h = 16)
forecast(crest.train.arima, h = 16)
exp(forecast(crest.train.arima, h = 16))
exp(forecast(crest.train.arima, h = 16)$mean)
knitr::include_graphics('Images/pred crest arima.png')
knitr::include_graphics('Images/pred colgate arima.png')
exp(forecast(colgate.train.arima, h = 16)$mean)
(forecast(colgate.train.arima, h = 16)$mean)
