## paqueteria zoo para mejor funcionamiento
sepxts <- cbind(sepxtsNoVida$`sepxts$Primas_no_vida.Close`, sepxtsVida$`sepxts$Primas_vida.Close`)
sepxts <- as.zoo(sepxts)
names(sepxts) <- c("NV", "V")
autoplot(sepxts) + ggtitle("Primas Trimestrales") + xlab("Trimestres") + ylab("Primas")
sepmod <- hts(sepxts, nodes = list(2))
sep.fit <- forecast(sepmod, method = 'tdfp', fmethod = 'ets')
names(sep.fit$labels) = c("Total", "No vida (NV) - Vida V")
plot(sep.fit)
plot.gts(sep.fit)
summary(sepmod)
## Forcast
sep.fit <- forecast(sepmod, method = 'bu', fmethod = 'ets')
names(sep.fit$labels) = c("Total", "No vida (NV) - Vida V")
plot(sep.fit)
#box-Ljung Test
Box.test(no_vida.fit.arima$residuals, lag = 4, fitdf = 3, type = "Lj")
Box.test(no_vida.fit.arima$residuals, lag = 8, fitdf = 3, type = "Lj")
Box.test(no_vida.fit.arima$residuals, lag = 12, fitdf = 3, type = "Lj")
box-Ljung Test
Box.test(total.fit.arima$residuals, lag = 4, fitdf = 3, type = "Lj")
Box.test(total.fit.arima$residuals, lag = 8, fitdf = 3, type = "Lj")
Box.test(total.fit.arima$residuals, lag = 12, fitdf = 3, type = "Lj")
## Forcast
sep.fit <- forecast(sepmod, method = 'bu', fmethod = 'arima') ## buttom up arima
names(sep.fit$labels) = c("Total", "No vida (NV) - Vida V")
plot(sep.fit)
View(sep.fit)
sep.fit[["nodes"]]
sep.fit
sep.fit[["bts"]]
sep.fit[["histy"]]
sepxts
sep.fit$method
sep.fit$fmethod
sep.fit$label$Total
aggts(sepxts)
aggts(sepmod)
sepxts
summary(total.fit.arima)
summary(vida.fit.arima)
summary(no_vida.fit.arima)
total.fit.arima$residuals
total.ets$mean
## Comparamos los forcast de los modelos
matrix(c(as.vector(total.ets$mean),
fventas.ets$mean,
]),ncol = 3)
as.vector(total.ets$mean)
matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean)]),ncol = 3)
## Comparamos los forcast de los modelos
matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean)),ncol = 3)
## Comparamos los forcast de los modelos
matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean),
as.vector(vida.ets$mean) + as.vector(no_vida.ets$mean)),ncol = 4)
sep.fit$bts
sep.fit$histy
sep.fit$bts
## Plot Series
sepxts <- xts(datos[,c(3,4)], order.by = datos$Fecha, frequency = 4)
## Generate quarterly data
sepxtsVida   <- to.quarterly(sepxts$Primas_vida)     ## OJO cambia a que sea trimestral
sepxtsNoVida <- to.quarterly(sepxts$Primas_no_vida)  ## OJO cambia a que sea trimestral
## paqueteria zoo para mejor funcionamiento
sepxts <- cbind(sepxtsNoVida$`sepxts$Primas_no_vida.Close`, sepxtsVida$`sepxts$Primas_vida.Close`)
sepxts <- as.zoo(sepxts)
names(sepxts) <- c("NV", "V")
autoplot(sepxts) + ggtitle("Primas Trimestrales") + xlab("Trimestres") + ylab("Primas")
## Select automatic HTS
sepmod <- hts(sepxts, nodes = list(2))
summary(sepmod)
## Forcast
sep.fit <- forecast(sepmod, method = 'bu', fmethod = 'ets') #
names(sep.fit$labels) = c("Total", "No vida (NV) - Vida V")
plot(sep.fit)
sep.fit$bts
sep.fit$bts$NV
sep.fit$bts[,1]
tota.arima$mean
vida.fit.arima$mean
vida.arima$mean
vida.arima <- forecast(vida.fit.arima)
ggplot(df_vida) + geom_point(aes(x = time,y = value)) +
geom_line(aes(x = time, y = value)) +
geom_forecast(vida.arima, alpha = 0.4) +
ggtitle("ARIMA: Predicción Primas Vida")
vida.arima$mean
no_vida.arima <- forecast(no_vida.fit.arima)
ggplot(df_no_vida) + geom_point(aes(x = time,y = value)) +
geom_line(aes(x = time, y = value)) +
geom_forecast(no_vida.arima, alpha = 0.4) +
ggtitle("ARIMA: Predicción Primas No Vida")
matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean),
as.vector(vida.ets$mean) + as.vector(no_vida.ets$mean),
as.vector(sep.fit$bts[,1]),
as.vector(sep.fit$bts[,2]),
as.vector(sep.fit$bts[,1]) + as.vector(sep.fit$bts[,2]),
as.vector(tota.arima$mean),
as.vector(vida.arima$mean),
as.vector(no_vida.arima$mean),
as.vector(vida.arima$mean) + as.vector(no_vida.arima$mean),
as.vector(sep.fit.arima$bts[,1]),
as.vector(sep.fit.arima$bts[,2]),
as.vector(sep.fit.arima$bts[,1]) + as.vector(sep.fit.arima$bts[,2])),ncol = 14)
sep.fit.arima <- forecast(sepmod, method = 'bu', fmethod = 'arima') ## buttom up arima
names(sep.fit.arima$labels) = c("Total", "No vida (NV) - Vida V")
plot(sep.fit.arima)
matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean),
as.vector(vida.ets$mean) + as.vector(no_vida.ets$mean),
as.vector(sep.fit$bts[,1]),
as.vector(sep.fit$bts[,2]),
as.vector(sep.fit$bts[,1]) + as.vector(sep.fit$bts[,2]),
as.vector(tota.arima$mean),
as.vector(vida.arima$mean),
as.vector(no_vida.arima$mean),
as.vector(vida.arima$mean) + as.vector(no_vida.arima$mean),
as.vector(sep.fit.arima$bts[,1]),
as.vector(sep.fit.arima$bts[,2]),
as.vector(sep.fit.arima$bts[,1]) + as.vector(sep.fit.arima$bts[,2])),ncol = 14)
sep.fit
compmat <-  matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean),
as.vector(vida.ets$mean) + as.vector(no_vida.ets$mean),
as.vector(sep.fit$bts[,2]),
as.vector(sep.fit$bts[,1]),
as.vector(sep.fit$bts[,1]) + as.vector(sep.fit$bts[,2]),
as.vector(tota.arima$mean),
as.vector(vida.arima$mean),
as.vector(no_vida.arima$mean),
as.vector(vida.arima$mean) + as.vector(no_vida.arima$mean),
as.vector(sep.fit.arima$bts[,2]),
as.vector(sep.fit.arima$bts[,1]),
as.vector(sep.fit.arima$bts[,1]) + as.vector(sep.fit.arima$bts[,2])),ncol = 14)
colnames(compmat) <- c("Total ETS",
"Vida ETS",
"No Vida ETS",
"V+NV ETS",
"Vida ETS HTS",
"No Vida ETS HTS",
"V+NV ETS HTS",
"Total ARIMA",
"Vida ARIMA",
"No Vida ARIMA",
"V+NV ARIMA",
"Vida ARIMA HTS",
"No Vida ARIMA HTS",
"V+NV ARIMA HTS")
compmat
## Datos ###############################################################################################
##
datos <- read.csv("Primas_mapfre.csv", sep = ";", dec = ",")
## Total
datos <- datos %>% mutate(total = Primas_vida + Primas_no_vida)
## Fecha
datos$Fecha <- as.Date(datos$Fecha, "%m/%d/%Y")
## Análisis exploratorio de datos ######################################################################
##
ggplot(data = datos, aes(x = Fecha)) +
geom_line(aes(y = Primas_vida, colour = "Vida")) +
geom_line(aes(y = Primas_no_vida, colour = "No Vida")) +
geom_line(aes(y = total, colour = "Total"))
## Trabajando un modelo ETS para Total #################################################################
##
## Plot Serie Total
total = xts((datos$total), order.by = datos$Fecha, frequency = 4)
## Generate quarterly data
total = to.quarterly(total)  ## OJO cambia a que sea trimestral
## paqueteria zoo para mejor funcionamiento
total = as.zoo(total$total.Close)
autoplot(total) + ggtitle("Primas Trimestrales") + xlab("Trimestres") + ylab("Primas")
## Seasonal Plot
ggfreqplot(as.ts(total), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Primas Trimestrales")
## Select automatic ETS
etsfit <- ets(total)
## forecast model
total.ets <- forecast(etsfit)
## Results
summary(total.ets)
## Eligio un MAM
## - M - multiplicativa la tendencia
## - A - aditiva en la pendiente
## - M - multiplicativa en estacionalidad
## ojo -> simpre que se hagan predicciones se debe dar un intervalo de confianza
# Plot
plot(total.ets, main = "Forcast Primas Mapfre")
lines(window(total),type = "o")
## Trabajando un modelo ETS por separado ###############################################################
##
## Plot Serie Primas Vida
vida = xts((datos$Primas_vida), order.by = datos$Fecha, frequency = 4)
## Generate quarterly data
vida = to.quarterly(vida)  ## OJO cambia a que sea trimestral
## paqueteria zoo para mejor funcionamiento
vida = as.zoo(vida$vida.Close)
autoplot(vida) + ggtitle("Primas Trimestrales Vida") + xlab("Trimestres") + ylab("Ventas")
## Seasonal Plot
ggfreqplot(as.ts(vida), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Primas Trimestrales Vida")
## Select automatic ETS
etsfit <- ets(vida)
## forecast model
vida.ets <- forecast(etsfit)
## Results
summary(vida.ets)
## Eligio un MAM
## - M - multiplicativa la tendencia
## - A - aditiva en la pendiente
## - M - multiplicativa en estacionalidad
## ojo -> simpre que se hagan predicciones se debe dar un intervalo de confianza
# Plot
plot(vida.ets, main = "Forcast Primas vida")
lines(window(vida),type = "o")
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
## Plot Serie Primas No Vida
no_vida <- xts((datos$Primas_no_vida), order.by = datos$Fecha, frequency = 4)
## Generate quarterly data
no_vida <- to.quarterly(no_vida)  ## OJO cambia a que sea trimestral
## paqueteria zoo para mejor funcionamiento
no_vida <- as.zoo(no_vida$no_vida.Close)
autoplot(no_vida) + ggtitle("Primas Trimestrales No Vida") + xlab("Trimestres") + ylab("Primas")
## Seasonal Plot
ggfreqplot(as.ts(no_vida), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Primas Trimestrales No Vida")
## Select automatic ETS
etsfit <- ets(no_vida)
## forecast model
no_vida.ets <- forecast(etsfit)
## Results
summary(no_vida.ets)
## Eligio un MAM
## - M - multiplicativa la tendencia
## - A - aditiva en la pendiente
## - M - multiplicativa en estacionalidad
## ojo -> simpre que se hagan predicciones se debe dar un intervalo de confianza
# Plot
plot(no_vida.ets, main = "Forcast Primas no vida")
lines(window(no_vida),type = "o")
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
## modelo ETS desde el enfoque de series de tiempo jerarquicas (hts)
##
## Plot Series
sepxts <- xts(datos[,c(3,4)], order.by = datos$Fecha, frequency = 4)
## Generate quarterly data
sepxtsVida   <- to.quarterly(sepxts$Primas_vida)     ## OJO cambia a que sea trimestral
sepxtsNoVida <- to.quarterly(sepxts$Primas_no_vida)  ## OJO cambia a que sea trimestral
## paqueteria zoo para mejor funcionamiento
sepxts <- cbind(sepxtsNoVida$`sepxts$Primas_no_vida.Close`, sepxtsVida$`sepxts$Primas_vida.Close`)
sepxts <- as.zoo(sepxts)
names(sepxts) <- c("NV", "V")
autoplot(sepxts) + ggtitle("Primas Trimestrales") + xlab("Trimestres") + ylab("Primas")
## Select automatic HTS
sepmod <- hts(sepxts, nodes = list(2))
## Forcast
sep.fit <- forecast(sepmod, method = 'bu', fmethod = 'ets') #
names(sep.fit$labels) = c("Total", "No vida (NV) - Vida V")
plot(sep.fit)
## Trabajando un modelo ARIMA para Total #############################################################
##
## Nuestra ts de primas totales se llama "total"
df_total <- data.frame(value = as.vector(total),
time = time(total))
ggplot(df_total) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("Primas") +
ggtitle("Primas Trimestrales Mapfre") +
xlab("Trimestres")
## trabajamos con transformacion logaritmica
logTotal <- log(total)
df_logTotal <- data.frame(value = as.vector(logTotal),
time = time(logTotal))
ggplot(df_logTotal) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("log - Primas") +
ggtitle("Primas Trimestrales Mapfre (logarítmicas)") +
xlab("Trimestres")
## Difference
ggtsdisplay(logTotal)
ggtsdisplay(diff(logTotal))
ggtsdisplay(diff(logTotal,4))
ggtsdisplay(diff(diff(logTotal,4),1))
## ARIMA MODEL Automatic selection
total.fit.arima <- auto.arima(total, lambda = 0) ## lamnda cero para transformacion log
summary(total.fit.arima)
#residual analysis
ggtsdisplay(total.fit.arima$residuals)
#box-Ljung Test
Box.test(total.fit.arima$residuals, lag = 4, fitdf = 3, type = "Lj")
Box.test(total.fit.arima$residuals, lag = 8, fitdf = 3, type = "Lj")
Box.test(total.fit.arima$residuals, lag = 12, fitdf = 3, type = "Lj")
tota.arima <- forecast(total.fit.arima)
ggplot(df_total) + geom_point(aes(x = time,y = value)) +
geom_line(aes(x = time, y = value)) +
geom_forecast(tota.arima, alpha = 0.4) +
ggtitle("ARIMA: Predicción Primas")
## Trabajando un modelo ARIMA para Primas por separdo #################################################
##
## Nuestra ts de primas vida se llama "vida"
df_vida <- data.frame(value = as.vector(vida),
time = time(vida))
ggplot(df_vida) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("Primas") +
ggtitle("Primas Trimestrales Mapfre") +
xlab("Trimestres")
## trabajamos con transformacion logaritmica
logvida <- log(vida)
df_logvida <- data.frame(value = as.vector(logvida),
time = time(logvida))
ggplot(df_logvida) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("log - Primas") +
ggtitle("Primas Trimestrales Mapfre (logarítmicas)") +
xlab("Trimestres")
## Difference
ggtsdisplay(logvida)
ggtsdisplay(diff(logvida))
ggtsdisplay(diff(logvida,4))
ggtsdisplay(diff(diff(logvida,4),1))
## ARIMA MODEL Automatic selection
vida.fit.arima <- auto.arima(vida, lambda = 0) ## lamnda cero para transformacion log
summary(vida.fit.arima)
#residual analysis
ggtsdisplay(vida.fit.arima$residuals)
#box-Ljung Test
Box.test(vida.fit.arima$residuals, lag = 4, fitdf = 3, type = "Lj")
Box.test(vida.fit.arima$residuals, lag = 8, fitdf = 3, type = "Lj")
Box.test(vida.fit.arima$residuals, lag = 12, fitdf = 3, type = "Lj")
vida.arima <- forecast(vida.fit.arima)
ggplot(df_vida) + geom_point(aes(x = time,y = value)) +
geom_line(aes(x = time, y = value)) +
geom_forecast(vida.arima, alpha = 0.4) +
ggtitle("ARIMA: Predicción Primas Vida")
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
## Nuestra ts de primas no vida se llama "no_vida"
df_no_vida <- data.frame(value = as.vector(no_vida),
time = time(no_vida))
ggplot(df_no_vida) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("Primas") +
ggtitle("Primas Trimestrales Mapfre") +
xlab("Trimestres")
## trabajamos con transformacion logaritmica
logno_vida <- log(no_vida)
df_logno_vida <- data.frame(value = as.vector(logno_vida),
time = time(logno_vida))
ggplot(df_logno_vida) + geom_point(aes(x = time, y = value)) +
geom_line(aes(x = time, y = value)) +
ylab("log - Primas") +
ggtitle("Primas Trimestrales Mapfre (logarítmicas)") +
xlab("Trimestres")
## Difference
ggtsdisplay(logno_vida)
ggtsdisplay(diff(logno_vida))
ggtsdisplay(diff(logno_vida,4))
ggtsdisplay(diff(diff(logno_vida,4),1))
## ARIMA MODEL Automatic selection
no_vida.fit.arima <- auto.arima(no_vida, lambda = 0) ## lamnda cero para transformacion log
summary(no_vida.fit.arima)
#residual analysis
ggtsdisplay(no_vida.fit.arima$residuals)
#box-Ljung Test
Box.test(no_vida.fit.arima$residuals, lag = 4, fitdf = 3, type = "Lj")
Box.test(no_vida.fit.arima$residuals, lag = 8, fitdf = 3, type = "Lj")
Box.test(no_vida.fit.arima$residuals, lag = 12, fitdf = 3, type = "Lj")
no_vida.arima <- forecast(no_vida.fit.arima)
ggplot(df_no_vida) + geom_point(aes(x = time,y = value)) +
geom_line(aes(x = time, y = value)) +
geom_forecast(no_vida.arima, alpha = 0.4) +
ggtitle("ARIMA: Predicción Primas No Vida")
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
## modelo ARIMA desde el enfoque de series de tiempo jerarquicas (hts)
##
## Plot Series
autoplot(sepxts) + ggtitle("Primas Trimestrales") + xlab("Trimestres") + ylab("Primas")
## Select automatic HTS
sepmod <- hts(sepxts, nodes = list(2))
## Forcast
sep.fit.arima <- forecast(sepmod, method = 'bu', fmethod = 'arima') ## buttom up arima
names(sep.fit.arima$labels) = c("Total", "No vida (NV) - Vida V")
plot(sep.fit.arima)
## Conclusiones ######################################################################################
##
## Comparamos los forcast de los modelos
compmat <-  matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean),
as.vector(vida.ets$mean) + as.vector(no_vida.ets$mean),
as.vector(sep.fit$bts[,2]),
as.vector(sep.fit$bts[,1]),
as.vector(sep.fit$bts[,1]) + as.vector(sep.fit$bts[,2]),
as.vector(tota.arima$mean),
as.vector(vida.arima$mean),
as.vector(no_vida.arima$mean),
as.vector(vida.arima$mean) + as.vector(no_vida.arima$mean),
as.vector(sep.fit.arima$bts[,2]),
as.vector(sep.fit.arima$bts[,1]),
as.vector(sep.fit.arima$bts[,1]) + as.vector(sep.fit.arima$bts[,2])),ncol = 14)
colnames(compmat) <- c("Total ETS",
"Vida ETS",
"No Vida ETS",
"V+NV ETS",
"Vida ETS HTS",
"No Vida ETS HTS",
"V+NV ETS HTS",
"Total ARIMA",
"Vida ARIMA",
"No Vida ARIMA",
"V+NV ARIMA",
"Vida ARIMA HTS",
"No Vida ARIMA HTS",
"V+NV ARIMA HTS")
compmat
time(total.ets$mean)
class(time(total.ets$mean))
class(as.vector(time(total.ets$mean)))
compmat <-  matrix(c(as.vector(total.ets$mean),
as.vector(vida.ets$mean),
as.vector(no_vida.ets$mean),
as.vector(vida.ets$mean) + as.vector(no_vida.ets$mean),
as.vector(sep.fit$bts[,2]),
as.vector(sep.fit$bts[,1]),
as.vector(sep.fit$bts[,1]) + as.vector(sep.fit$bts[,2]),
as.vector(tota.arima$mean),
as.vector(vida.arima$mean),
as.vector(no_vida.arima$mean),
as.vector(vida.arima$mean) + as.vector(no_vida.arima$mean),
as.vector(sep.fit.arima$bts[,2]),
as.vector(sep.fit.arima$bts[,1]),
as.vector(sep.fit.arima$bts[,1]) + as.vector(sep.fit.arima$bts[,2]),
as.vector(time(total.ets$mean))),ncol = 15)
colnames(compmat) <- c("Total ETS",
"Vida ETS",
"No Vida ETS",
"V+NV ETS",
"Vida ETS HTS",
"No Vida ETS HTS",
"V+NV ETS HTS",
"Total ARIMA",
"Vida ARIMA",
"No Vida ARIMA",
"V+NV ARIMA",
"Vida ARIMA HTS",
"No Vida ARIMA HTS",
"V+NV ARIMA HTS",
"Trimestre")
compmat
compmat <- as.data.frame(compmat)
compmat
## comparamos graficamente
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `Total ETS`, colour = "Total ETS")) +
geom_line(aes(y = `V+NV ETS`, colour = "V+NV ETS")) +
geom_line(aes(y = `V+NV ETS HTS`, colour = "`V+NV ETS HTS`"))
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `Total ETS`, colour = "Total ETS")) +
geom_line(aes(y = `V+NV ETS`, colour = "V+NV ETS"))
compmat$`V+NV ARIMA`
## comparamos graficamente
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `Total ETS`, colour = "Total ETS")) +
geom_line(aes(y = `V+NV ETS`, colour = "V+NV ETS")) +
geom_line(aes(y = `Total ARIMA`, colour = "Total ARIMA")) +
geom_line(aes(y = `V+NV ARIMA`, colour = "V+NV ARIMA"))
## comparamos graficamente
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `Total ETS`, colour = "Total ETS")) +
geom_line(aes(y = `V+NV ETS`, colour = "V+NV ETS")) +
geom_line(aes(y = `Total ARIMA`, colour = "Total ARIMA")) +
geom_line(aes(y = `V+NV ARIMA`, colour = "V+NV ARIMA"))+
ggtitle("Primas Totales")
## comparamos graficamente
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `Total ETS`, colour = "Total ETS")) +
geom_line(aes(y = `V+NV ETS`, colour = "V+NV ETS")) +
geom_line(aes(y = `Total ARIMA`, colour = "Total ARIMA")) +
geom_line(aes(y = `V+NV ARIMA`, colour = "V+NV ARIMA")) +
ggtitle("Primas Totales") + ylab("Primas")
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `Vida ETS`, colour = "Vida ETS")) +
geom_line(aes(y = `Vida ARIMA`, colour = "Vida ARIMA")) +
ggtitle("Primas Vida") + ylab("Primas")
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `No Vida ETS`, colour = "No Vida ETS")) +
geom_line(aes(y = `No Vida ARIMA`, colour = "No Vida ARIMA")) +
ggtitle("Primas Vida") + ylab("Primas")
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `No Vida ETS`, colour = "No Vida ETS")) +
geom_line(aes(y = `No Vida ARIMA`, colour = "No Vida ARIMA")) +
ggtitle("Primas No Vida") + ylab("Primas")
autoplot(total) + ggtitle("Primas Trimestrales") + xlab("Trimestres") + ylab("Primas")
# Plot
plot(total.ets, main = "Forcast Primas Mapfre")
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `Vida ETS`, colour = "Vida ETS")) +
geom_line(aes(y = `Vida ARIMA`, colour = "Vida ARIMA")) +
ggtitle("Primas Vida") + ylab("Primas")
ggplot(data = compmat, aes(x = Trimestre)) +
geom_line(aes(y = `No Vida ETS`, colour = "No Vida ETS")) +
geom_line(aes(y = `No Vida ARIMA`, colour = "No Vida ARIMA")) +
ggtitle("Primas No Vida") + ylab("Primas")
